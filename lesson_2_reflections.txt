Q.1 What happens when you initialize a repository? Why do you need to do it?

Ans. Initializing repository to a particular directory creates a hidden file .git which stores the metadata that is connected to the changes made while commiting.

For initializing : we need to go to the desired directory, then the command git init should be entered. To view this hidden file you need to type "ls -a".


Q.2 How is the staging area different from the working directory and the repository? What value do you think it offers?

Ans. Staging area is created just before the user begins to commit. And the files that are included in the staging area are commited. staging area comes at intermediate stage between working directory and repository. Later after committing the changes they are included in repository.

It helps us to know about the files that needs to be committed. We could add multiple files using git add commmand to the staging area and they would all be part of a single commit. That is all those files will be included in one commit when multiple changes are made to them.


Q3. How can you use the staging area to make sure you have commit per logical change?

Ans. We add files to staging area before commiting them. If two or more files are interrelated logically then we could add them both one by one through git add command to the staging area. Then using git commit command we would be able to commit changes to all of them at once.
Thus, making us sure that we commit per logical change.

If the files are not related, add one then commit it through git commit and do the same with the others.

Q4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Ans. When we don't want to completely modify the file in ordered form one by one connected to the previous versions through commits. But we just want to have another version that have some changes but want to commit them so as to create a different path. 

The created branch would have the commit that we want for those minor changes as a different version. But the main branch would have recent commit only before creating new branch until we don't make changes to it. 


Q.5 How do the diagrams help you visualize the branch structure?

Ans. Diagrams gives us a clear picture about master and other branches that have been created with reference to their commit id's. In this way we visualise at which commit a new branch was created. 

If we run git log being at a particular branch, it would trace the commits beginning from the most recent commit(of branch) and then would go back to the initial commit. Somewhere in the process it would come back to the point of master branch from where the branch originated. Then would trace the commits all the way back to initial commit through the master branch.

If we just checkout a previous commit and make a new commit there, it would not show up when we run git log from master branch.





